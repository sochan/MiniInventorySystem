@page "/AddComputer"
@inject IComputerService MyService
@inject IJSRuntime JsRuntime


<h2>Add Computer</h2>
<hr />

<EditForm Model="@obj" OnValidSubmit="Create">

    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for="Brand" class="control-label">Brand</label>
                <InputText id="Brand" class="form-control" @bind-Value="@obj.Brand" />
                <ValidationMessage For="@(() => obj.Brand)" />
            </div>

            <div class="form-group">
                <label for="Ram" class="control-label">Memory</label>
                <select class="custom-select" @onchange="OnMemoryChange" title="Memory">
                    <option value="NON" selected disabled="disabled">(Choose a Memory)</option>
                    @foreach (var item in LIST_MEMORY)
                    {
                        if (item == obj.Memory)
                        {
                            <option selected="selected" value="@item"> @item</option>
                        }
                        else
                        {
                            <option value="@item"> @item</option>
                        }
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="Ram" class="control-label">RAM</label>
                <select class="custom-select" @onchange="OnRamChange" title="RAM">
                    <option value="NON" selected disabled="disabled">(Choose a RAM)</option>
                    @foreach (var item in LIST_RAM)
                    {
                        if (item == obj.Ram)
                        {
    <option selected="selected" value="@item"> @item</option> }
                        else
                        {
    <option value="@item"> @item</option>}

                    }
                </select>
            </div>

            <div class="form-group">
                <label for="UsbPort" class="control-label">Usb ports</label>
                <InputNumber id="UsbPort" class="form-control" @bind-Value="@obj.UsbPort" />
                <ValidationMessage For="@(() => obj.UsbPort)" />
            </div>
            <div class="form-group">
                <label for="RamSlot" class="control-label">Ram slots</label>
                <InputNumber id="RamSlot" class="form-control" @bind-Value="@obj.RamSlot" />
                <ValidationMessage For="@(() => obj.RamSlot)" />
            </div>

            <div class="form-group">
                <label for="Quantity" class="control-label">Quantity</label>
                <InputNumber id="Quantity" class="form-control" @bind-Value="@obj.Quantity" />
                <ValidationMessage For="@(() => obj.Quantity)" />
            </div>

            <div class="form-group">
                <label for="Price" class="control-label">Price</label>
                <InputNumber id="Price" class="form-control" @bind-Value="@obj.Price" />
                <ValidationMessage For="@(() => obj.Price)" />
            </div>

            <div class="form-group">
                <label for="Roles" class="control-label">Device types</label>
                <CheckBoxList Data="@listTypes"
                              TextField="@((item) => item.Name)"
                              ValueField="@((item) => item.Value)"
                              SelectedValues="@SelectedIds" />

                @if (showError)
                {
<div class="text-danger validation-summary-errors">
    @PLEASE_CHOOSE_DEVICE_TYPE
</div>                }
            </div>

        </div>

    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => Cancel())">Cancel</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    Computer obj = new Computer();

    IList<DeviceType> listTypes = Util.ListTypes();
    protected List<string> SelectedIds = new List<string>();
    bool showError = false;

    string SelectedRam = "";
    string SelectedMemory = "";

    protected async Task Create()
    {
        try
        {
            var types = SelectedIds.Sum();

            if (types <= 0)
            {
                showError = true;
                return;
            }
            obj.Types = types;
            obj.IsActive = true;
            obj.IsDeleted = false;
            obj.Ram = SelectedRam;
            obj.Memory = SelectedMemory;
            await Task.Run(() => MyService.Create(obj));

            Console.WriteLine(obj.Id);

            NavigationManager.NavigateTo("Computers");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.StackTrace);
        }
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("Computers");
    }

    protected void OnRamChange(ChangeEventArgs e)
    {
        SelectedRam = e.Value.ToString();
        StateHasChanged();

    }

    protected void OnMemoryChange(ChangeEventArgs e)
    {
        SelectedMemory = e.Value.ToString();
        StateHasChanged();

    }
}
